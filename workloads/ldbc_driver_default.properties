# -------------------------------------
# -------------------------------------
# ----- LDBC Driver Configuration -----
# -------------------------------------
# -------------------------------------

# ***********************
# *** driver defaults ***
# ***********************

# status display interval (intermittently show status during benchmark execution)
# INTEGER (seconds)
status=2

# thread pool size to use for executing operation handlers
# INTEGER
thread_count=1

# name of the benchmark run
# STRING
name=LDBC

# path specifying where to write the benchmark results file
# STRING
results_dir=results

# time unit to use for measuring performance metrics (e.g., query response time)
# ENUM ([NANOSECONDS, MICROSECONDS, MILLISECONDS, SECONDS, MINUTES])
time_unit=MILLISECONDS

# used to 'compress'/'stretch' durations between operation start times to increase/decrease benchmark load
# e.g. 2.0 = run benchmark 2x slower, 0.1 = run benchmark 10x faster
# DOUBLE
time_compression_ratio=1.0

# size (i.e., duration) of execution window used by the WINDOWED scheduling mode
# LONG (milliseconds)
window_duration=1000

# NOT USED AT PRESENT - reserved for distributed driver mode
# specifies the addresses of other driver processes, so they can find each other
# LIST (e.g., peer1|peer2|peer3)
peer_identifiers=

# tolerated duration (in milliseconds) that operation execution may be late by
# if driver can not execute an operation within tolerated_execution_delay of its scheduled start time it will terminate
# LONG (milliseconds)
tolerated_execution_delay=1800000

# enable validation that will check if the provided database implementation is correct
# parameter value specifies where to find the validation parameters file
# STRING
# validate_database=

# generate validation parameters file for validating correctness of database implementations
# parameter values specify: (1) where to create the validation parameters file (2) how many validation parameters to generate
# STRING|INTEGER (e.g., validation_parameters.csv|1000)
# create_validation_parameters=

# enable validation that will check if the provided workload implementation is correct
# BOOLEAN
validate_workload=false

# calculate & display workload statistics (operation mix, etc.)
# BOOLEAN
workload_statistics=false

# sleep duration (ms) injected into busy wait loops (to reduce CPU consumption)
# LONG (milliseconds)
spinner_wait_duration=0

# print help string - usage instructions
# BOOLEAN
help=false

# executes operations as fast as possible, ignoring their scheduled start times
# BOOLEAN
ignore_scheduled_start_times=false

# ***************************************************************
# *** the following should be set by workload implementations ***
# ***************************************************************

# fully qualified class name of the Workload (class) implementation to execute
# STRING (e.g., com.ldbc.driver.workloads.ldbc.snb.interactive.LdbcSnbInteractiveWorkload)
# workload=

# number of operations to generate during benchmark execution
# LONG
# operation_count=

# ************************************************************************************
# *** the following should be set by vendor implementations for specific workloads ***
# ************************************************************************************

# fully qualified class name of the Db (class) implementation to execute
# STRING (e.g., com.ldbc.driver.workloads.ldbc.snb.interactive.db.DummyLdbcSnbInteractiveDb)
# database=
